'use client';

import React, { useState } from 'react';

interface Props {
  isOpen: boolean;
  onClose: () => void;
}

const AddInviteModal: React.FC<Props> = ({ isOpen, onClose }) => {
  const [trial, setTrial] = useState('');
  const [country, setCountry] = useState('');
  const [language, setLanguage] = useState('');
  const [mobiles, setMobiles] = useState(['']);

  if (!isOpen) return null;

  const handleMobileChange = (index: number, value: string) => {
    const updated = [...mobiles];
    updated[index] = value;
    setMobiles(updated);
  };

  const handleAddMobile = () => {
    if (mobiles.length < 10) {
      setMobiles([...mobiles, '']);
    }
  };

  const handleRemoveMobile = (index: number) => {
    const updated = mobiles.filter((_, i) => i !== index);
    setMobiles(updated);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log({ trial, country, language, mobiles });
    onClose();
  };

  return (
    <div className="fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center">
      <div className="bg-white rounded-2xl w-full max-w-4xl shadow-xl relative overflow-hidden">
        {/* Close Button */}
        <button
          className="absolute top-4 right-4 text-gray-600 text-2xl font-semibold hover:text-black z-10"
          onClick={onClose}
        >
          Ã—
        </button>

        <div className="flex h-[80vh]">
          {/* LEFT COLUMN - WHITE */}
          <div className="w-1/2 bg-white p-6 overflow-y-auto">
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">Add Invites</h2>

            {/* Step 1 Badge */}
            <div className="flex items-center gap-2 mb-4">
              <span className="bg-blue-600 text-white text-xs font-bold w-6 h-6 flex items-center justify-center rounded-full">
                1
              </span>
              <h3 className="text-sm font-semibold text-gray-700 uppercase tracking-wide">
                Select Demographics
              </h3>
            </div>

            {/* Clinical Trial */}
            <div className="mb-4">
              <label className="block text-sm font-medium mb-1">Clinical Trial</label>
              <select
                value={trial}
                onChange={(e) => setTrial(e.target.value)}
                className="w-full border border-gray-300 rounded px-3 py-2"
              >
                <option value="">Select</option>
                <option value="Trial A">Trial A</option>
                <option value="Trial B">Trial B</option>
              </select>
            </div>

            {/* Country */}
            <div className="mb-4">
              <label className="block text-sm font-medium mb-1">Country/Region</label>
              <select
                value={country}
                onChange={(e) => setCountry(e.target.value)}
                className="w-full border border-gray-300 rounded px-3 py-2"
              >
                <option value="">Select</option>
                <option value="US">United States</option>
                <option value="IN">India</option>
              </select>
            </div>

            {/* Language */}
            <div>
              <label className="block text-sm font-medium mb-1">Language</label>
              <select
                value={language}
                onChange={(e) => setLanguage(e.target.value)}
                className="w-full border border-gray-300 rounded px-3 py-2"
              >
                <option value="">Select</option>
                <option value="English">English</option>
                <option value="Spanish">Spanish</option>
              </select>
            </div>
          </div>

          {/* RIGHT COLUMN - GREY */}
          <div className="w-1/2 bg-gray-100 p-6 flex flex-col justify-between">
            {/* Header & badge */}
            <div className="flex items-center gap-2 mb-4 mt-12 ml-1 flex-shrink-0">
              <span className="bg-blue-600 text-white text-xs font-bold w-6 h-6 flex items-center justify-center rounded-full">
                2
              </span>
              <h3 className="text-sm font-semibold text-gray-700 uppercase tracking-wide">
                Add Mobile <span className="text-xs font-normal text-gray-500">(up to 10 numbers)</span>
              </h3>
            </div>

            {/* Scrollable mobile inputs container */}
            <div className="overflow-y-auto flex-1 pr-2">
              {mobiles.map((mobile, index) => (
                <div key={index} className="flex items-center gap-2 mb-3">
                  <span className="text-sm text-gray-500 w-6 text-right">{index + 1}</span>
                  <input
                    type="text"
                    value={mobile}
                    onChange={(e) => handleMobileChange(index, e.target.value)}
                    placeholder="(000) 000 - 0000"
                    className="flex-1 border border-gray-300 rounded px-3 py-2"
                  />
                  {mobiles.length > 1 && (
                    <button
                      type="button"
                      onClick={() => handleRemoveMobile(index)}
                      className="text-gray-400 hover:text-red-500"
                    >
                      ðŸ—‘
                    </button>
                  )}
                </div>
              ))}

              {/* Add Mobile Button */}
              {mobiles.length < 10 && (
                <button
                  type="button"
                  onClick={handleAddMobile}
                  className="text-blue-600 text-sm flex items-center gap-1 hover:underline mt-2"
                >
                  <span>âž•</span> Add mobile
                </button>
              )}
            </div>

            {/* Submit Button */}
            <div className="mt-6 text-right flex-shrink-0">
              <button
                onClick={handleSubmit}
                className="bg-red-600 hover:bg-red-700 text-white px-6 py-2 rounded-full"
              >
                Submit â†’
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AddInviteModal;
